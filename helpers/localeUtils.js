/**
 * Gets the intl id that will be generated by the localization scripts based on the supplied string
 * NOTE: for cases where you are setting a string value on a variable and then passing that variable to the < Text /> component somewhere else.
 * ... Use < Text id={ intlId } / > instead of < Text msg={ intlId } / > so the Text component will look up the id instead of generating a new id from the msg string.
 * @param {string} msg - ex. "Good Morning!"
 * @returns {string} - ex. "Good_Morning"
 */
export function locId (msg) {
	return generateIntlId(msg);
}

/**
 * Gets the string value from the localization file based on the supplied string.
 * NOTE: for cases when there is absolutely no way to use the < Text /> component
 * @param {object} intl - the intl object that comes from react-intl
 * @param {string} msg - ex. "Good Morning!"
 * @param {object} [values={}]
 * @returns {string} - ex. for local='en' -> "Good Morning!" and local='de' -> "Guten Morgen!"
 */
export function locText (intl, msg, values) {
	const intlId = generateIntlId(msg);
	// NOTE: formatMessage will throw a warning if the string is not found which we want for now
	return intl.formatMessage({ id: intlId }, values);
}

/**
 * Used by localization to generate a id based on a text string
 * NOTE: Method is used by the localdata.js script to dynamically build BaseLocale.generated.js
 * @param {string} value
 * @returns {string}
 */
export function generateIntlId (value) {
	return value
		.replace(/\s/g, '_')
		.replace(/[\W\{\[\}\]\,\.\;\:]/g, '') //eslint-disable-line
		.substring(0, 50);
}
